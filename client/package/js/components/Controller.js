/*
 * Controller.js
 * 
 */

/*
 * @comp Controller is actually like a joystick
 * This component attempts to emulate touches using Crafty mouse events.
 * It then converts the touch to a key press which is used by @comp Controllable.
 */
Crafty.c('Controller', {
	init: function() {
	    this.requires(Properties.RENDERER + ", 2D, Color, Mouse"); // bluedragon, can use sprite for controller image
		
		this.attr({isDown:false, w:100, h:100, z:100});
		this.color("#00FF00");
		
		this.bind("MouseDown", function(mouseEvent){
			this.isDown = true;
			this._resolveKey(mouseEvent);
		})
		this.bind("MouseUp", function(mouseEvent){
			this.isDown = false;
			this._resetKeys();
		})
		this.bind("MouseOut", function(mouseEvent){
			this.isDown = false;
			this._resetKeys();
		})
		this.bind("MouseMove", function(mouseEvent){
			this._resetKeys();
			this._resolveKey(mouseEvent);
		})
		return this;
	},
	// cache vectors for angle computation
	_xAxis: new Crafty.math.Vector2D(1, 0),
	_tempVec: new Crafty.math.Vector2D(0, 0),
	// resets key presses
	_resetKeys: function(){
		if (Crafty.keydown[Crafty.keys['RIGHT_ARROW']]) Crafty.keyboardDispatch({'type':'keyup', 'keyCode' : Crafty.keys['RIGHT_ARROW'] });
		if (Crafty.keydown[Crafty.keys['LEFT_ARROW']]) Crafty.keyboardDispatch({'type':'keyup', 'keyCode' : Crafty.keys['LEFT_ARROW'] });
		if (Crafty.keydown[Crafty.keys['UP_ARROW']]) Crafty.keyboardDispatch({'type':'keyup', 'keyCode' : Crafty.keys['UP_ARROW'] });
		if (Crafty.keydown[Crafty.keys['DOWN_ARROW']]) Crafty.keyboardDispatch({'type':'keyup', 'keyCode' : Crafty.keys['DOWN_ARROW'] });
	},
	// resolves MouseDown or MouseMove events to a key press
	_resolveKey: function(mouseEvent){
		var x = mouseEvent.clientX;
		var y = mouseEvent.clientY;
		var dx = x - this.x - this.w/2;
		var dy = y - this.y - this.h/2;
		var angle = this._tempVec.setValues(dx, dy).angleBetween(this._xAxis);
		if (this.isDown)
		{
			if (Math.abs(angle) < Math.PI/4 && !Crafty.keydown[Crafty.keys['RIGHT_ARROW']]) Crafty.keyboardDispatch({'type':'keydown', 'keyCode' : Crafty.keys['RIGHT_ARROW'] });
			if (Math.abs(angle) > Math.PI*3/4 && !Crafty.keydown[Crafty.keys['LEFT_ARROW']]) Crafty.keyboardDispatch({'type':'keydown', 'keyCode' : Crafty.keys['LEFT_ARROW'] });
			if (Math.PI/4 < angle && angle < Math.PI*3/4 && !Crafty.keydown[Crafty.keys['UP_ARROW']]) Crafty.keyboardDispatch({'type':'keydown', 'keyCode' : Crafty.keys['UP_ARROW'] });
			if (-Math.PI*3/4 < angle && angle < -Math.PI/4 && !Crafty.keydown[Crafty.keys['DOWN_ARROW']]) Crafty.keyboardDispatch({'type':'keydown', 'keyCode' : Crafty.keys['DOWN_ARROW'] });
		}
	},
})

/*
 * @comp Controllable is used in conjuction with @comp Controller
 * Key presses generated by the controller is handled by controllable.
 * 
 */
Crafty.c('Controllable', {
	_aHandler: undefined,
	_bHandler: undefined,
	init: function(){
		this.requires("Keyboard, Multiway");
		
		this.bind('KeyDown', function(keyEvent){
			if (keyEvent.key == Crafty.keys['A'])
				_aHandler();
			if (keyEvent.key == Crafty.keys['B'])
				_bHandler();
		});
		return this;
	},
	controllable: function(speed, aHandler, bHandler){
		this._aHandler = aHandler;
		this._bHandler = bHandler;
		this.multiway(speed, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});
		return this;
	}
})
